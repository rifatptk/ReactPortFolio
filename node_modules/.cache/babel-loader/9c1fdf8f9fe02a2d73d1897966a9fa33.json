{"ast":null,"code":"var _jsxFileName = \"/home/rifatptk/Documents/Working DIR/Web dev/Projects/ReactPortFolio/client/src/PortfolioContainer/Skills/Skills.js\";\nimport React from \"react\";\nimport \"./Skills.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Skills() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"skills-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"skill\",\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        class: \"fa fa-code-fork\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"skill-header\",\n        children: \"Algorithm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"skill-details\",\n        children: \"Algorithms are at the heart of computer science. To borrow a definition from Investopedia, \\u201CAn algorithm is a set of instructions for solving a problem or accomplishing a task. One common example of an algorithm is a recipe, which consists of specific instructions for preparing a dish/meal.\\u201D As odd as it is to think of a programming term through a culinary lens, the metaphor works. Algorithms make it possible to provide step-by-step guidelines for how a program should run and execute a specific technical solution, such as displaying\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"skill\",\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        class: \"fa-solid fa-folder-tree\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"skill-header\",\n        children: \"Data Structure\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"skill-details\",\n        children: \"An understanding of algorithms leads us to our next hard skill: comprehending and using data structures. While an algorithm can order data when it is directed to do so, programmers need to understand how the data is organized in the first place. Data structures allow programmers to store data within specific frameworks and better facilitate communication between back end operations and front end users. There are several commonly-used data structures. An array, for example,\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"skill\",\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        class: \"fa-solid fa-database\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"skill-header\",\n        children: \"SQL & NoSQL \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"skill-details\",\n        children: \"Two of the most common types of programming languages that are used to communicate with databases on the back ends of web pages are SQL and NoSQL. Back end development is the part of the website that visitors do not see; it\\u2019s where programmers work on dictating the code that structures the visible part of the website. The back end stores and organizes data so that the visible side of the site continuously works. When users take action on the front end of a website, those actions send information to the back end, which is then translated into information the browser understands and can provide a response to.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n}\n_c = Skills;\n\nvar _c;\n\n$RefreshReg$(_c, \"Skills\");","map":{"version":3,"sources":["/home/rifatptk/Documents/Working DIR/Web dev/Projects/ReactPortFolio/client/src/PortfolioContainer/Skills/Skills.js"],"names":["React","Skills"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,cAAP;;AAEA,eAAe,SAASC,MAAT,GAAkB;AAC/B,sBACE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,8BACE;AAAG,QAAA,KAAK,EAAC;AAAT;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAI,QAAA,SAAS,EAAC,cAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAG,QAAA,SAAS,EAAC,eAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAeE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,8BACE;AAAG,QAAA,KAAK,EAAC;AAAT;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAI,QAAA,SAAS,EAAC,cAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAG,QAAA,SAAS,EAAC,eAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YAfF,eA6BE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,8BACE;AAAG,QAAA,KAAK,EAAC;AAAT;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAI,QAAA,SAAS,EAAC,cAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAG,QAAA,SAAS,EAAC,eAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YA7BF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgDD;KAjDuBA,M","sourcesContent":["import React from \"react\";\nimport \"./Skills.css\";\n\nexport default function Skills() {\n  return (\n    <div className=\"skills-container\">\n      <div className=\"skill\">\n        <i class=\"fa fa-code-fork\"></i>\n        <h2 className=\"skill-header\">Algorithm</h2>\n        <p className=\"skill-details\">\n          Algorithms are at the heart of computer science. To borrow a\n          definition from Investopedia, “An algorithm is a set of instructions\n          for solving a problem or accomplishing a task. One common example of\n          an algorithm is a recipe, which consists of specific instructions for\n          preparing a dish/meal.” As odd as it is to think of a programming term\n          through a culinary lens, the metaphor works. Algorithms make it\n          possible to provide step-by-step guidelines for how a program should\n          run and execute a specific technical solution, such as displaying\n        </p>\n      </div>\n      <div className=\"skill\">\n        <i class=\"fa-solid fa-folder-tree\"></i>\n        <h2 className=\"skill-header\">Data Structure</h2>\n        <p className=\"skill-details\">\n          An understanding of algorithms leads us to our next hard skill:\n          comprehending and using data structures. While an algorithm can order\n          data when it is directed to do so, programmers need to understand how\n          the data is organized in the first place. Data structures allow\n          programmers to store data within specific frameworks and better\n          facilitate communication between back end operations and front end\n          users. There are several commonly-used data structures. An array, for\n          example,\n        </p>\n      </div>\n      <div className=\"skill\">\n        <i class=\"fa-solid fa-database\"></i>\n        <h2 className=\"skill-header\">SQL & NoSQL </h2>\n        <p className=\"skill-details\">\n          Two of the most common types of programming languages that are used to\n          communicate with databases on the back ends of web pages are SQL and\n          NoSQL. Back end development is the part of the website that visitors\n          do not see; it’s where programmers work on dictating the code that\n          structures the visible part of the website. The back end stores and\n          organizes data so that the visible side of the site continuously\n          works. When users take action on the front end of a website, those\n          actions send information to the back end, which is then translated\n          into information the browser understands and can provide a response\n          to.\n        </p>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}