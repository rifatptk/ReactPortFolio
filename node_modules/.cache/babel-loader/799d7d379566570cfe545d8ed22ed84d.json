{"ast":null,"code":"var _jsxFileName = \"/home/rifatptk/Documents/Working DIR/Web dev/Projects/ReactPortFolio/client/src/PortfolioContainer/Skills/Skills.js\";\nimport React from \"react\";\nimport \"./Skills.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Skills() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"skills-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"skill\",\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        class: \"fa fa-code-fork\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"skill-header\",\n        children: \"Algorithm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"skill-details\",\n        children: \"Algorithms are at the heart of computer science. To borrow a definition from Investopedia, \\u201CAn algorithm is a set of instructions for solving a problem or accomplishing a task. One common example of an algorithm is a recipe, which consists of specific instructions for preparing a dish/meal.\\u201D As odd as it is to think of a programming term through a culinary lens, the metaphor works. Algorithms make it possible to provide step-by-step guidelines for how a program should run and execute a specific technical solution, such as displaying relevant results to a Google query. Algorithms also make it possible to quickly sort and structure data in a way that is ordered and makes sense to viewers \\u2014 and thus are critical to programming specialists such as data scientists, who need to organize and analyze massive amounts of information daily. Understanding how to code, change, and fix an algorithm is fundamental to programming. Once you know how to write a functional algorithm, you will be able to build a host of other skills atop that foundation.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"skill\",\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        class: \"fa-solid fa-folder-tree\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"skill-header\",\n        children: \"Data Structure\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"skill-details\",\n        children: \"An understanding of algorithms leads us to our next hard skill: comprehending and using data structures. While an algorithm can order data when it is directed to do so, programmers need to understand how the data is organized in the first place. Data structures allow programmers to store data within specific frameworks and better facilitate communication between back end operations and front end users. There are several commonly-used data structures. An array, for example, holds and indexes items of the same data type, such as integers. This simple structure makes arrays ideal for sorting algorithms; they are often used to construct other kinds of data structures. A few of these include linked lists, which organize data in linear, sequentially-linked order, and stacks, which allow programmers to access recently-placed items first, as if they were picking up the first book in a pile. If you intend to make a career in programming, you need to have at least a basic understanding of data science and structures. Take some time to familiarize yourself with the fundamentals; you may find that doing so helps you better understand back end operations.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"skill\",\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        class: \"fa fa-code-fork\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"skill-header\",\n        children: \"Algorithm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"skill-details\",\n        children: \"Algorithms are at the heart of computer science. To borrow a definition from Investopedia, \\u201CAn algorithm is a set of instructions for solving a problem or accomplishing a task. One common example of an algorithm is a recipe, which consists of specific instructions for preparing a dish/meal.\\u201D As odd as it is to think of a programming term through a culinary lens, the metaphor works. Algorithms make it possible to provide step-by-step guidelines for how a program should run and execute a specific technical solution, such as displaying relevant results to a Google query. Algorithms also make it possible to quickly sort and structure data in a way that is ordered and makes sense to viewers \\u2014 and thus are critical to programming specialists such as data scientists, who need to organize and analyze massive amounts of information daily. Understanding how to code, change, and fix an algorithm is fundamental to programming. Once you know how to write a functional algorithm, you will be able to build a host of other skills atop that foundation.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n}\n_c = Skills;\n\nvar _c;\n\n$RefreshReg$(_c, \"Skills\");","map":{"version":3,"sources":["/home/rifatptk/Documents/Working DIR/Web dev/Projects/ReactPortFolio/client/src/PortfolioContainer/Skills/Skills.js"],"names":["React","Skills"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,cAAP;;AAEA,eAAe,SAASC,MAAT,GAAkB;AAC/B,sBACE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,8BACE;AAAG,QAAA,KAAK,EAAC;AAAT;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAI,QAAA,SAAS,EAAC,cAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAG,QAAA,SAAS,EAAC,eAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAuBE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,8BACA;AAAG,QAAA,KAAK,EAAC;AAAT;AAAA;AAAA;AAAA;AAAA,cADA,eAEE;AAAI,QAAA,SAAS,EAAC,cAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAG,QAAA,SAAS,EAAC,eAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YAvBF,eAoCE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,8BACE;AAAG,QAAA,KAAK,EAAC;AAAT;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAI,QAAA,SAAS,EAAC,cAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAG,QAAA,SAAS,EAAC,eAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YApCF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA6DD;KA9DuBA,M","sourcesContent":["import React from \"react\";\nimport \"./Skills.css\";\n\nexport default function Skills() {\n  return (\n    <div className=\"skills-container\">\n      <div className=\"skill\">\n        <i class=\"fa fa-code-fork\"></i>\n        <h2 className=\"skill-header\">Algorithm</h2>\n        <p className=\"skill-details\">\n          Algorithms are at the heart of computer science. To borrow a\n          definition from Investopedia, “An algorithm is a set of instructions\n          for solving a problem or accomplishing a task. One common example of\n          an algorithm is a recipe, which consists of specific instructions for\n          preparing a dish/meal.” As odd as it is to think of a programming term\n          through a culinary lens, the metaphor works. Algorithms make it\n          possible to provide step-by-step guidelines for how a program should\n          run and execute a specific technical solution, such as displaying\n          relevant results to a Google query. Algorithms also make it possible\n          to quickly sort and structure data in a way that is ordered and makes\n          sense to viewers — and thus are critical to programming specialists\n          such as data scientists, who need to organize and analyze massive\n          amounts of information daily. Understanding how to code, change, and\n          fix an algorithm is fundamental to programming. Once you know how to\n          write a functional algorithm, you will be able to build a host of\n          other skills atop that foundation.\n        </p>\n      </div>\n      <div className=\"skill\">\n      <i class=\"fa-solid fa-folder-tree\"></i>\n        <h2 className=\"skill-header\">Data Structure</h2>\n        <p className=\"skill-details\">\n        An understanding of algorithms leads us to our next hard skill: comprehending and using data structures. While an algorithm can order data when it is directed to do so, programmers need to understand how the data is organized in the first place. Data structures allow programmers to store data within specific frameworks and better facilitate communication between back end operations and front end users. \n\nThere are several commonly-used data structures. An array, for example, holds and indexes items of the same data type, such as integers. This simple structure makes arrays ideal for sorting algorithms; they are often used to construct other kinds of data structures. A few of these include linked lists, which organize data in linear, sequentially-linked order, and stacks, which allow programmers to access recently-placed items first, as if they were picking up the first book in a pile. \n\nIf you intend to make a career in programming, you need to have at least a basic understanding of data science and structures. Take some time to familiarize yourself with the fundamentals; you may find that doing so helps you better understand back end operations.\n\n\n        </p>\n      </div>\n      <div className=\"skill\">\n        <i class=\"fa fa-code-fork\"></i>\n        <h2 className=\"skill-header\">Algorithm</h2>\n        <p className=\"skill-details\">\n          Algorithms are at the heart of computer science. To borrow a\n          definition from Investopedia, “An algorithm is a set of instructions\n          for solving a problem or accomplishing a task. One common example of\n          an algorithm is a recipe, which consists of specific instructions for\n          preparing a dish/meal.” As odd as it is to think of a programming term\n          through a culinary lens, the metaphor works. Algorithms make it\n          possible to provide step-by-step guidelines for how a program should\n          run and execute a specific technical solution, such as displaying\n          relevant results to a Google query. Algorithms also make it possible\n          to quickly sort and structure data in a way that is ordered and makes\n          sense to viewers — and thus are critical to programming specialists\n          such as data scientists, who need to organize and analyze massive\n          amounts of information daily. Understanding how to code, change, and\n          fix an algorithm is fundamental to programming. Once you know how to\n          write a functional algorithm, you will be able to build a host of\n          other skills atop that foundation.\n        </p>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}